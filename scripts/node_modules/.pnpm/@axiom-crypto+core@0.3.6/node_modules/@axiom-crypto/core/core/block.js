"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Block = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importStar(require("axios"));
const version_1 = require("../version");
class Block {
    constructor(config) {
        this.config = config;
    }
    getBlockHashWitness(blockNumber) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = this.config.getConstants().Urls.ApiBaseUrl;
            const endpoint = this.config.getConstants().Endpoints.GetBlockHashWitness;
            const uri = `${baseUrl}${endpoint}`;
            const result = yield axios_1.default.get(uri, {
                params: {
                    blockNumber,
                    mock: this.config.mock,
                    chainId: this.config.chainId,
                },
                headers: {
                    "x-axiom-api-key": this.config.apiKey,
                    "x-provider-uri": this.config.providerUri,
                    "User-Agent": 'axiom-sdk-ts/' + version_1.SDK_VERSION,
                }
            });
            if ((result === null || result === void 0 ? void 0 : result.status) === axios_1.HttpStatusCode.Ok) {
                if (((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.blockHashWitness) !== undefined) {
                    return result.data.blockHashWitness;
                }
            }
            return null;
        });
    }
    getBlockMerkleProof(blockNumber) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = this.config.getConstants().Urls.ApiBaseUrl;
            const endpoint = this.config.getConstants().Endpoints.GetBlockMerkleProof;
            const uri = `${baseUrl}${endpoint}`;
            const result = yield axios_1.default.get(uri, {
                params: {
                    blockNumber,
                    mock: this.config.mock,
                    chainId: this.config.chainId,
                },
                headers: {
                    "x-axiom-api-key": this.config.apiKey,
                    "x-provider-uri": this.config.providerUri,
                    "User-Agent": 'axiom-sdk-ts/' + version_1.SDK_VERSION,
                }
            });
            if ((result === null || result === void 0 ? void 0 : result.status) === axios_1.HttpStatusCode.Ok) {
                if (((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.merkleProof) !== undefined) {
                    return result.data.merkleProof;
                }
            }
            return null;
        });
    }
    getBlockRlpHeader(blockNumber) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = this.config.getConstants().Urls.ApiBaseUrl;
            const endpoint = this.config.getConstants().Endpoints.GetBlockRlpHeader;
            const uri = `${baseUrl}${endpoint}`;
            const result = yield axios_1.default.get(uri, {
                params: {
                    blockNumber,
                    mock: this.config.mock,
                    chainId: this.config.chainId,
                },
                headers: {
                    "x-axiom-api-key": this.config.apiKey,
                    "x-provider-uri": this.config.providerUri,
                    "User-Agent": 'axiom-sdk-ts/' + version_1.SDK_VERSION,
                }
            });
            if ((result === null || result === void 0 ? void 0 : result.status) === axios_1.HttpStatusCode.Ok) {
                if ((result === null || result === void 0 ? void 0 : result.data) !== undefined) {
                    return result.data;
                }
            }
            return null;
        });
    }
    getBlockParams(blockNumber) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = this.config.getConstants().Urls.ApiBaseUrl;
            const endpoint = this.config.getConstants().Endpoints.GetBlockParams;
            const uri = `${baseUrl}${endpoint}`;
            const result = yield axios_1.default.get(uri, {
                params: {
                    blockNumber,
                    mock: this.config.mock,
                    chainId: this.config.chainId,
                },
                headers: {
                    "x-axiom-api-key": this.config.apiKey,
                    "x-provider-uri": this.config.providerUri,
                    "User-Agent": 'axiom-sdk-ts/' + version_1.SDK_VERSION,
                }
            });
            if ((result === null || result === void 0 ? void 0 : result.status) === axios_1.HttpStatusCode.Ok) {
                if ((result === null || result === void 0 ? void 0 : result.data) !== undefined) {
                    return result.data;
                }
            }
            return null;
        });
    }
    getBlockMmrProof(blockNumber) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseUrl = this.config.getConstants().Urls.ApiBaseUrl;
            const endpoint = this.config.getConstants().Endpoints.GetBlockMmrProof;
            const uri = `${baseUrl}${endpoint}`;
            const result = yield axios_1.default.get(uri, {
                params: {
                    blockNumber,
                    mock: this.config.mock,
                    chainId: this.config.chainId,
                },
                headers: {
                    "x-axiom-api-key": this.config.apiKey,
                    "x-provider-uri": this.config.providerUri,
                    "User-Agent": 'axiom-sdk-ts/' + version_1.SDK_VERSION,
                }
            });
            if ((result === null || result === void 0 ? void 0 : result.status) === axios_1.HttpStatusCode.Ok) {
                if ((result === null || result === void 0 ? void 0 : result.data) !== undefined) {
                    return result.data;
                }
            }
            return null;
        });
    }
}
exports.Block = Block;
//# sourceMappingURL=block.js.map