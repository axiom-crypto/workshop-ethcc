"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodePackedQuery = void 0;
// The packed query blob is encodePacked as [versionIdx, length, encdoedQueries[]]: ["uint8", "uint32", "bytes[]"]
// Each row is then encodePacked as [length, blockNumber, address, slot, value]: ["uint8", "uint32", "address", "uint256", "uint256"]
function decodePackedQuery(query) {
    const queryVersion = parseInt(query.slice(2, 4));
    const queryRows = parseInt(query.slice(4, 12), 16);
    const encodedQueries = query.slice(12);
    if (isNaN(queryVersion) || isNaN(queryRows)) {
        return null;
    }
    let header = {
        version: queryVersion,
        numRows: queryRows,
    };
    let body = [];
    if (queryVersion === 1) {
        body = decodePackedQueryV1(encodedQueries, queryRows);
    }
    else {
        return null;
    }
    return {
        header,
        body,
    };
}
exports.decodePackedQuery = decodePackedQuery;
function decodePackedQueryV1(encodedQueries, rows) {
    let decodedQueries = [];
    let offset = 0;
    for (let i = 0; i < rows; i++) {
        const queryLength = parseInt(encodedQueries.slice(offset, offset + 2), 16);
        offset += 2;
        if (queryLength > 4) {
            throw new Error(`Invalid query length: greater than 4: ${queryLength}`);
        }
        const blockNumber = parseInt(encodedQueries.slice(offset, offset + 8), 16);
        offset += 8;
        if (queryLength === 1) {
            decodedQueries.push({
                blockNumber,
                address: undefined,
                slot: undefined,
                value: undefined,
            });
            continue;
        }
        const address = `0x${encodedQueries.slice(offset, offset + 40)}`;
        offset += 40;
        if (queryLength === 2) {
            decodedQueries.push({
                blockNumber,
                address,
                slot: undefined,
                value: undefined,
            });
            continue;
        }
        const slot = `0x${encodedQueries.slice(offset, offset + 64)}`;
        offset += 64;
        const value = `0x${encodedQueries.slice(offset, offset + 64)}`;
        offset += 64;
        decodedQueries.push({
            blockNumber,
            address,
            slot,
            value,
        });
    }
    return decodedQueries;
}
//# sourceMappingURL=decoder.js.map