"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeccakMerkleRoot = exports.getFullStorageResponse = exports.getFullAccountResponse = exports.getBlockResponse = void 0;
const ethers_1 = require("ethers");
const merkletreejs_1 = require("merkletreejs");
// block_response.keccak = keccak(blockHash . uint32(blockNumber))
function getBlockResponse(blockHash, blockNumber) {
    const encodedBlockResponse = ethers_1.ethers.solidityPacked(["bytes32", "uint32"], [blockHash, blockNumber]);
    return (0, ethers_1.keccak256)(encodedBlockResponse);
}
exports.getBlockResponse = getBlockResponse;
// full_account_response.keccak = keccak(blockNumber . address . keccak(uint64(nonce)
// . uint96(balance) . storageRoot . codeHash))
function getFullAccountResponse(blockNumber, address, nonce, balance, storageRoot, codeHash) {
    const encodedAccountResponse = ethers_1.ethers.solidityPacked(["uint64", "uint96", "bytes32", "bytes32"], [nonce, balance, storageRoot, codeHash]);
    const keccakAccountResponse = (0, ethers_1.keccak256)(encodedAccountResponse);
    const encodedFullAccountResponse = ethers_1.ethers.solidityPacked(["uint32", "address", "bytes32"], [blockNumber, address, keccakAccountResponse]);
    return (0, ethers_1.keccak256)(encodedFullAccountResponse);
}
exports.getFullAccountResponse = getFullAccountResponse;
// full_storage_response.keccak = keccak(blockNumber . address . slot . uint256(value))
function getFullStorageResponse(blockNumber, address, slot, value) {
    const encodedStorageResponse = ethers_1.ethers.solidityPacked(["uint32", "address", "uint256", "uint256"], [blockNumber, address, slot, value]);
    return (0, ethers_1.keccak256)(encodedStorageResponse);
}
exports.getFullStorageResponse = getFullStorageResponse;
function getKeccakMerkleRoot(leaves) {
    const tree = new merkletreejs_1.MerkleTree(leaves, ethers_1.keccak256);
    return tree.getHexRoot();
}
exports.getKeccakMerkleRoot = getKeccakMerkleRoot;
//# sourceMappingURL=response.js.map