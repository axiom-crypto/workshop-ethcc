"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionOverrideGoerliMock = exports.versionDataGoerli = void 0;
const endpoints_1 = require("../endpoints");
exports.versionDataGoerli = {
    v0: {
        Addresses: {
            Axiom: "",
        },
        Urls: {
            ApiBaseUrl: "https://axiom-api-staging.vercel.app/v0",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Endpoints.GetBlockRlpHeader,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
    v0_2: {
        Addresses: {
            Axiom: "",
        },
        Urls: {
            ApiBaseUrl: "https://axiom-api-staging.vercel.app/v0_2",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Endpoints.GetBlockRlpHeader,
            GetBlockMmrProof: endpoints_1.Endpoints.GetBlockMmrProof,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
    v1: {
        Addresses: {
            Axiom: "0x8eb3a522cab99ed365e450dad696357de8ab7e9d",
            AxiomQuery: "0x82842F7a41f695320CC255B34F18769D68dD8aDF",
        },
        Urls: {
            ApiBaseUrl: "https://axiom-api-staging.vercel.app/v1",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockRlpHeader,
            GetBlockMmrProof: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockMmrProof,
            GetAllQueries: endpoints_1.Path.Query + endpoints_1.Endpoints.GetAllQueries,
            GetDataForQuery: endpoints_1.Path.Query + endpoints_1.Endpoints.GetDataForQuery,
            GetQueryCount: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQueryCount,
            GetQueryData: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQueryData,
            GetQuery: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQuery,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
};
exports.versionOverrideGoerliMock = {
    v1: {
        Addresses: {
            Axiom: "0x8d41105949fc6C418DfF1A76Ff5Ae69128Ade55a",
            AxiomQuery: "0x4Fb202140c5319106F15706b1A69E441c9536306",
        },
    },
};
//# sourceMappingURL=goerli.js.map