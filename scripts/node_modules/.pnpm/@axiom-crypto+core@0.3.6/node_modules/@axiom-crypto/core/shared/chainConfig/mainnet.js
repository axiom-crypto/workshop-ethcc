"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionOverrideMainnetMock = exports.versionDataMainnet = void 0;
const endpoints_1 = require("../endpoints");
exports.versionDataMainnet = {
    v0: {
        Addresses: {
            Axiom: "0x2251c204749e18a0f9A7a90Cff1b554F8d492b3c",
        },
        Urls: {
            ApiBaseUrl: "https://api.axiom.xyz/v0",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Endpoints.GetBlockRlpHeader,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
    v0_2: {
        Addresses: {
            Axiom: "0xF990f9CB1A0aa6B51c0720a6f4cAe577d7AbD86A",
        },
        Urls: {
            ApiBaseUrl: "https://api.axiom.xyz/v0_2",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Endpoints.GetBlockRlpHeader,
            GetBlockMmrProof: endpoints_1.Endpoints.GetBlockMmrProof,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
    v1: {
        Addresses: {
            Axiom: "0x33ea514cc54b641ad8b84e4a31d311f3722d1bb5",
            AxiomQuery: "0xd617ab7f787adf64c2b5b920c251ea10cd35a952",
        },
        Urls: {
            ApiBaseUrl: "https://api.axiom.xyz/v1",
        },
        Endpoints: {
            GetBlockHashWitness: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockHashWitness,
            GetBlockMerkleProof: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockMerkleProof,
            GetBlockParams: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockParams,
            GetBlockRlpHeader: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockRlpHeader,
            GetBlockMmrProof: endpoints_1.Path.Block + endpoints_1.Endpoints.GetBlockMmrProof,
            GetAllQueries: endpoints_1.Path.Query + endpoints_1.Endpoints.GetAllQueries,
            GetDataForQuery: endpoints_1.Path.Query + endpoints_1.Endpoints.GetDataForQuery,
            GetQueryCount: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQueryCount,
            GetQueryData: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQueryData,
            GetQuery: endpoints_1.Path.Query + endpoints_1.Endpoints.GetQuery,
        },
        Values: {
            MaxQuerySize: 64,
            QueryEncodingVersion: 1,
        },
    },
};
exports.versionOverrideMainnetMock = {
    v1: {
        Addresses: {
            Axiom: "0x33ea514cc54b641ad8b84e4a31d311f3722d1bb5",
            AxiomQuery: "0xd617ab7f787adf64c2b5b920c251ea10cd35a952",
        },
    },
};
//# sourceMappingURL=mainnet.js.map